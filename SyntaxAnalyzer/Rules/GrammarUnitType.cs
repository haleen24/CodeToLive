namespace SyntaxAnalyzer.Rules;

public enum GrammarUnitType  // Список всех составных грамматических единиц
                             // (простые представлены LexemType)
                             // Определения записанф в rules.txt
{
    SNL,
    Separator,
    IndexatorOperator,
    OverloadableOperator,
    OperatorOverload,
    Conversion,
    AttributeName,
    AttributeNameOrAccessor,
    Attribute,
    Indexator,
    OptionalFinal,
    IdentifierWithFinal,
    Assignable,
    AssignableSequence,
    AdditionalAssignables,
    OptionalAdditionalAssignables,
    AssignOperator,
    OptionalComma,
    AssignStatement,
    Parenth,
    ElseStmt,
    OptionalElse,
    IfStmt,
    WhileStmt,
    OptionalInlineStmt,
    OptionalExpression,
    ForStmt,
    ForeachStmt,
    OptionalIdentifier,
    CatchStmt,
    CatchSequence,
    FinallyStmt,
    OptionalFinally,
    CatchBlock,
    TryBody,
    TryStmt,
    BreakStmt,
    ContinueStmt,
    ReturnStmt,
    ThrowStmt,
    ImportStmt,
    OptionalStatic,
    FieldModifier,
    OptionalFieldModifier,
    FieldStmt,
    NamedArgument,
    CommaWithNewLine,
    PositionalFormalArguments,
    AdditionalPositionalFormalArguments,
    OptionalAdditionalPositionalFormalArguments,
    NamedArguments,
    AdditionalNamedArguments,
    OptionalAdditionalNamedArguments,
    ParamsArgument,
    AdditionalParamsArgument,
    OptionalAdditionalParamsArgument,
    FormalArgumentsWithPositional,
    FormalArgumentsWithParams,
    FunctionFormalArguments,
    GetterDeclaration,
    SetterDeclaration,
    FunctionName,
    FunctionDefinition,
    SuperclassList,
    AdditionalSuperclasses,
    OptionalAdditionalSuperclasses,
    SuperclassesDeclaration,
    OptionalSuperclassesDeclaration,
    ClassType,
    ClassDefinition,
    OptionalStmt,
    StmtSequence,
    Block,
    Module,
    PositionalActualArguments,
    AdditionalPositionalActualArguments,
    OptionalAdditionalPositionalActualArguments,
    ActualArgumentsWithPositional,
    FunctionActualArguments,
    FunctionCall,
    UnaryOperator,
    UnaryExpression,
    BinaryOperator,
    ExpressionWithBinaryOperators,
    Expression,
    TernaryOperatorExpression,
    Lambda,
    InlineStmt,
    Stmt,
    ExpressionWithoutBinaryOperators
}